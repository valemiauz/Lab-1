import java.util.*;

public class BigVigenere {
    private int[] key;
    private char[][] alphabet;
    private final String CHARS = "abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZ0123456789";
    private final int ALPHABET_SIZE = CHARS.length();

    public BigVigenere() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese la clave numérica: ");
        String numericKey = scanner.nextLine();
        this.key = convertKey(numericKey);
        generateAlphabet();
    }

    public BigVigenere(String numericKey) {
        this.key = convertKey(numericKey);
        generateAlphabet();
    }

    private int[] convertKey(String numericKey) {
        int[] result = new int[numericKey.length()];
        for (int i = 0; i < numericKey.length(); i++) {
            result[i] = Character.getNumericValue(numericKey.charAt(i));
        }
        return result;
    }

    private void generateAlphabet() {
        alphabet = new char[ALPHABET_SIZE][ALPHABET_SIZE];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            for (int j = 0; j < ALPHABET_SIZE; j++) {
                alphabet[i][j] = CHARS.charAt((i + j) % ALPHABET_SIZE);
            }
        }
    }

    private int getCharIndex(char c) {
        return CHARS.indexOf(c);
    }

    public String encrypt(String message) {
        StringBuilder encrypted = new StringBuilder();
        for (int i = 0; i < message.length(); i++) {
            char m = message.charAt(i);
            int mi = getCharIndex(m);
            if (mi == -1) {
                encrypted.append(m);
                continue;
            }
            int ki = key[i % key.length] % ALPHABET_SIZE;
            encrypted.append(alphabet[mi][ki]);
        }
        return encrypted.toString();
    }

    public String decrypt(String encryptedMessage) {
        StringBuilder decrypted = new StringBuilder();
        for (int i = 0; i < encryptedMessage.length(); i++) {
            char c = encryptedMessage.charAt(i);
            int ki = key[i % key.length] % ALPHABET_SIZE;
            int row = -1;
            for (int r = 0; r < ALPHABET_SIZE; r++) {
                if (alphabet[r][ki] == c) {
                    row = r;
                    break;
                }
            }
            if (row == -1) {
                decrypted.append(c);
            } else {
                decrypted.append(CHARS.charAt(row));
            }
        }
        return decrypted.toString();
    }

    public void reEncrypt() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Ingrese el mensaje encriptado: ");
        String encryptedMessage = scanner.nextLine();
        String decryptedMessage = decrypt(encryptedMessage);

        System.out.print("Ingrese la nueva clave numérica: ");
        String newKey = scanner.nextLine();
        this.key = convertKey(newKey);

        String newEncrypted = encrypt(decryptedMessage);
        System.out.println("Nuevo mensaje encriptado: " + newEncrypted);
    }

    public char search(int position) {
        if (position < 0 || position >= ALPHABET_SIZE * ALPHABET_SIZE) {
            throw new IllegalArgumentException("Posición fuera de rango");
        }
        int row = position / ALPHABET_SIZE;
        int col = position % ALPHABET_SIZE;
        return alphabet[row][col];
    }
    
    public char optimalSearch(int position) {
    if (position < 0 || position >= ALPHABET_SIZE * ALPHABET_SIZE) {
        throw new IllegalArgumentException("Posición fuera de rango");
    }
    int row = position / ALPHABET_SIZE;
    int col = position % ALPHABET_SIZE;
    return alphabet[row][col];
    }
}
